import cv2
import mediapipe as mp
import numpy as np
mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose
def calculate_angle(a,b,c):
    a = np.array(a) # First
    b = np.array(b) # Mid
    c = np.array(c) # End
    
    radians = np.arctan2(c[1]-b[1], c[0]-b[0]) - np.arctan2(a[1]-b[1], a[0]-b[0])
    angle = np.abs(radians*180.0/np.pi)
    
    if angle >180.0:
        angle = 360-angle
        
    return angle

def add_image(img, masked_img, scale, x_ratio, y_ratio):
    # I want to put logo on top-left corner, So I create a ROI
    rows,cols,channels = masked_img.shape
    # print(rows,cols)
    masked_img = cv2.resize(masked_img,(int(rows*scale), int(cols*scale)))
    rows,cols,channels = masked_img.shape
    # print(rows,cols)
    i_r, i_c, i_ch = img.shape
    
    x_s, y_s = int(i_r*x_ratio),int(i_c*y_ratio)
    roi = img[x_s:x_s + rows, y_s:y_s+cols]
    # Now create a mask of logo and create its inverse mask also
    img2gray = cv2.cvtColor(masked_img,cv2.COLOR_BGR2GRAY)
    ret, mask = cv2.threshold(img2gray, 10, 255, cv2.THRESH_BINARY)
    mask_inv = cv2.bitwise_not(mask)
    # Now black-out the area of logo in ROI
    img1_bg = cv2.bitwise_and(roi,roi,mask = mask_inv)
    # Take only region of logo from logo image.
    img2_fg = cv2.bitwise_and(masked_img,masked_img,mask = mask)
    # Put logo in ROI and modify the main image
    #print(img1_bg.shape, img2_fg.shape)
    dst = cv2.add(img1_bg,img2_fg[:,:,:3])
    
    img[x_s:x_s + rows, y_s:y_s+cols] = dst
    return img

cap = cv2.VideoCapture(0)

# Curl counter variables
counter = 0 
stage = None

#logo
logo_img= cv2.imread('./logo.png', cv2.IMREAD_UNCHANGED)

logo_scale = 0.4
x_s_logo = 0.02
y_s_logo = 0.9



## Setup mediapipe instance
with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:
    while cap.isOpened():
        ret, frame = cap.read()
        
        # Recolor image to RGB
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False
      
        # Make detection
        results = pose.process(image)
    
        # Recolor back to BGR
        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        
        # Extract landmarks
        try:
            landmarks = results.pose_landmarks.landmark
            
            # Get coordinates
            hip = [landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value].x,landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value].y]
            knee = [landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value].x,landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value].y]
            ankle = [landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value].x,landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value].y]
            # Calculate angle
            angle = calculate_angle(hip, knee, ankle)
            
            # Visualize angle
            cv2.putText(image, str(angle), 
                           tuple(np.multiply(knee, [640, 480]).astype(int)), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA
                                )
            
            # Curl counter logic
            if angle > 169:
                stage = "UP"
            if angle <= 90 and stage =='UP':
                stage="DOWN"
                counter +=1
                print(counter)
                       
        except:
            pass
        
         # Render curl counter
        # Setup status box
        cv2.rectangle(image, (20,30), (220,90), (0,0,0), -1)
        
        # Rep data
        cv2.putText(image, 'REPS', (15,22), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,0), 1, cv2.LINE_AA)
        cv2.putText(image, str(counter), 
                    (35,80), 
                    cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 2, cv2.LINE_AA)
        
        # Stage data
        cv2.putText(image, 'STAGE', (65,22), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,0), 1, cv2.LINE_AA)
        cv2.putText(image, stage, 
                    (120,80), 
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 1, cv2.LINE_AA)
         
        # add logo to img
        image = add_image(image,logo_img,logo_scale, x_s_logo, y_s_logo)

        # break # debug
        
        # Cheer up
        if counter == 5: 
            cv2.putText(image, "5 Left", (30,120), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2, cv2.LINE_AA)
        if counter == 6: 
            cv2.putText(image, "4 Left", (30,120), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2, cv2.LINE_AA)
        if counter == 7: 
            cv2.putText(image, "3 Left", (30,120), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2, cv2.LINE_AA)
        if counter == 8: 
            cv2.putText(image, "2 Left", (30,120), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2, cv2.LINE_AA)
        if counter == 9: 
            cv2.putText(image, "ONE More!", (30,120), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2, cv2.LINE_AA)
        if counter == 10: 
            cv2.putText(image, "GREAT!", (30,120), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2, cv2.LINE_AA)
        if counter > 10: 
            cv2.putText(image, "Fantastic!", (30,120), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2, cv2.LINE_AA)
        
        
        
        
        # Render detections
        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                                mp_drawing.DrawingSpec(color=(245,117,66), thickness=2, circle_radius=2), 
                                mp_drawing.DrawingSpec(color=(245,66,230), thickness=2, circle_radius=2) 
                                 )               
        
        cv2.imshow('Myposi', image)

        if cv2.waitKey(10) & 0xFF == 27:
            break

    cap.release()
    cv2.destroyAllWindows()
